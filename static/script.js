function openLogin() {
    closeAll();
    document.getElementById("overlay").classList.add("active");
    document.getElementById("loginModal").classList.add("active");
}

function openRegister() {
    closeAll();
    let overlay = document.getElementById("overlay");
    let registerModal = document.getElementById("registerModal");

    if (overlay && registerModal) {
        overlay.classList.add("active");
        registerModal.classList.add("active");
    } else {
        console.error("‚ùå –û—à–∏–±–∫–∞: –û–∫–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ DOM");
    }
}

function togglePasswordVisibility(inputId) {
    const input = document.getElementById(inputId);
    const toggleIcon = document.querySelector(`#${inputId} + .toggle-password`);

    if (input.type === "password") {
        input.type = "text";
        toggleIcon.textContent = "üëÅÔ∏è"; // –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É –Ω–∞ "–≥–ª–∞–∑ –æ—Ç–∫—Ä—ã—Ç"
    } else {
        input.type = "password";
        toggleIcon.textContent = "üëÅÔ∏è‚Äçüó®Ô∏è"; // –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É –Ω–∞ "–≥–ª–∞–∑ –∑–∞–∫—Ä—ã—Ç"
    }
}

function handlePasswordInput(input) {
    const toggleIcon = input.nextElementSibling;
    if (input.value.length > 0) {
        toggleIcon.classList.add("visible"); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–æ–∫, –µ—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –ø—É—Å—Ç–æ–µ
    } else {
        toggleIcon.classList.remove("visible"); // –°–∫—Ä—ã–≤–∞–µ–º –∑–Ω–∞—á–æ–∫, –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
    }
}

function closeAll() {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    document.getElementById("overlay").classList.remove("active");
    document.getElementById("loginModal").classList.remove("active");
    document.getElementById("registerModal").classList.remove("active");

    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –∏ —Å–∫—Ä—ã–≤–∞–µ–º –∑–Ω–∞—á–∫–∏ –≥–ª–∞–∑–∞
    const loginFields = document.querySelectorAll("#loginModal input");
    loginFields.forEach(field => {
        field.value = "";
        field.classList.remove("error-input");
        const toggleIcon = field.nextElementSibling;
        if (toggleIcon && toggleIcon.classList.contains('toggle-password')) {
            toggleIcon.classList.remove("visible"); // –°–∫—Ä—ã–≤–∞–µ–º –∑–Ω–∞—á–æ–∫ –≥–ª–∞–∑–∞
        }
    });

    const registerFields = document.querySelectorAll("#registerModal input");
    registerFields.forEach(field => {
        field.value = "";
        field.classList.remove("error-input");
        const toggleIcon = field.nextElementSibling;
        if (toggleIcon && toggleIcon.classList.contains('toggle-password')) {
            toggleIcon.classList.remove("visible"); // –°–∫—Ä—ã–≤–∞–µ–º –∑–Ω–∞—á–æ–∫ –≥–ª–∞–∑–∞
        }
    });

    const warningIcons = document.querySelectorAll(".warning-icon");
    warningIcons.forEach(icon => {
        icon.style.display = "none";
    });
}

document.addEventListener("DOMContentLoaded", function () {
    const passwordInputs = document.querySelectorAll('.password-container input[type="password"]');
    passwordInputs.forEach(input => {
        // –°–æ–∑–¥–∞–µ–º –∑–Ω–∞—á–æ–∫ –≥–ª–∞–∑–∞, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
        if (!input.nextElementSibling || !input.nextElementSibling.classList.contains('toggle-password')) {
            const toggleIcon = document.createElement('span');
            toggleIcon.className = 'toggle-password';
            toggleIcon.textContent = "üëÅÔ∏è‚Äçüó®Ô∏è"; // –ò–∫–æ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≥–ª–∞–∑ –∑–∞–∫—Ä—ã—Ç)
            toggleIcon.onclick = () => togglePasswordVisibility(input.id);
            input.parentNode.appendChild(toggleIcon);

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –≤–≤–æ–¥–∞
            input.addEventListener('input', () => handlePasswordInput(input));

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª–µ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)
            handlePasswordInput(input);
        }
    });
});

function validateLogin() {
    const email = document.getElementById("login-email").value;
    const password = document.getElementById("login-password").value;

    fetch('/validate_login', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            window.location.href = '/';
        } else {
            alert(data.message);
        }
    })
    .catch(error => console.error('–û—à–∏–±–∫–∞:', error));
}

function validatePassword(password) {
    const minLength = 8;
    const hasUpperCase = /[A-Z]/.test(password);
    const hasLowerCase = /[a-z]/.test(password);
    const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/.test(password);

    if (password.length < minLength) {
        return "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤.";
    }
    if (!hasUpperCase) {
        return "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—É–∫–≤—É –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.";
    }
    if (!hasLowerCase) {
        return "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—É–∫–≤—É –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.";
    }
    if (!hasSpecialChar) {
        return "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª (!, @, #, –∏ —Ç.–¥.).";
    }
    return null; // –ü–∞—Ä–æ–ª—å –≤–∞–ª–∏–¥–µ–Ω
}

function validateRegister() {
    const name = document.getElementById("name").value;
    const surname = document.getElementById("surname").value;
    const email = document.getElementById("email").value;
    const password = document.getElementById("password").value;
    const repeatPassword = document.getElementById("repeatPassword").value;
    const birthdate = document.getElementById("birthdate").value;

    fetch('/validate_register', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name, surname, email, password, repeat_password: repeatPassword, birthdate }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            window.location.href = '/';
        } else {
            alert(data.message);
        }
    })
    .catch(error => console.error('–û—à–∏–±–∫–∞:', error));
}

function toggleMenu() {
    let menu = document.getElementById("userMenu");
    menu.style.display = menu.style.display === "block" ? "none" : "block";
}

document.addEventListener("click", function (event) {
    let menu = document.getElementById("userMenu");
    let btn = document.querySelector(".user-btn");

    if (menu && btn && !btn.contains(event.target) && !menu.contains(event.target)) {
        menu.style.display = "none";
    }
});

document.getElementById("login-btn").addEventListener("click", function(event) {
    event.preventDefault();
    validateLogin();
});

document.getElementById("register-btn").addEventListener("click", function(event) {
    event.preventDefault();
    validateRegister();
});

function openSolutions() {
    const solutionsCount = parseInt(document.getElementById("answer-count").textContent, 10);

    if (solutionsCount === 0) {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ –±–µ–ª–æ–µ –æ–∫–Ω–æ
        const emptyModal = document.createElement('div');
        emptyModal.className = 'empty-modal';
        emptyModal.innerHTML = `
            <div class="empty-modal-content">
                <p>–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã —Ä–µ—à–µ–Ω–∏–π.</p>
            </div>
        `;
        document.body.appendChild(emptyModal);
    } else {
        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ—à–µ–Ω–∏–π
        alert("–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ—à–µ–Ω–∏–π...");
    }
}

document.getElementById("new-btn").addEventListener("click", openSolutions);